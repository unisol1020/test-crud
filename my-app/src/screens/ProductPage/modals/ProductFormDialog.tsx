import React, {useCallback, useContext, useEffect} from "react";import {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from "@mui/material";import {useForm} from "react-hook-form";import axios from "../../../lib/axios";import ProductsContext from "../../../context/ProductsContext";import {yupResolver} from "@hookform/resolvers/yup";import * as yup from "yup";import {IProductsContext} from '../../../types/products-context';import {IProduct} from '../../../types/api/product';interface IProductFormDialogProps {  open: boolean;  handleClose: () => void;  productId?: number;}interface IProductForm extends Pick<IProduct, 'title' | 'description' | 'url'> {}const schema = yup.object({  title: yup.string().required(),  description: yup.string().nullable(),  url: yup.string().url().nullable()});const ProductFormDialog = ({open, handleClose, productId}: IProductFormDialogProps) => {  const {products, setProducts}: IProductsContext = useContext(ProductsContext);  const {    register,    handleSubmit,    formState: {errors},    setValue,    reset  } = useForm({    defaultValues: {      title: "",      description: null,      url: null,    },    resolver: yupResolver(schema)  });  const editProduct = async (data: IProductForm) => {    await axios.patch(`/products/${productId}`, data)      .then(() => {        setProducts(products.map((product: IProduct) => product.id === productId ? data : product))      });  };  const createProduct = async (data: IProductForm) => {    await axios.post("/products", data)      .then(() => setProducts([...products, data]))      .then(() => reset());  };  const getProducts = async () => {    await axios.get("/products")      .then((response) => {        setProducts(response.data.data);      });  };  const onSubmit = async (data: IProductForm) => {    try {      productId ? await editProduct(data) : await createProduct(data);      getProducts();      handleClose();    } catch (e) {      console.error(e);    }  };  const getProductById = useCallback(async (id: number) => {    try {      await axios.get(`/products/${id}`)        .then((response) => {          setValue("title", response.data.title);          setValue("description", response.data.description);          setValue("url", response.data.url);        });    } catch (e) {      console.error(e);    }  }, [setValue]);  useEffect(() => {    if (productId) {      getProductById(productId);    }  }, [productId, getProductById]);  return (    <Dialog open={open} onClose={handleClose}>      <DialogTitle>{productId ? "Edit" : "Create"}</DialogTitle>      <form onSubmit={handleSubmit(onSubmit)}>        <DialogContent>          <TextField            {...register("title")}            autoFocus            error={!!errors.title}            margin="dense"            label="Title"            type="text"            fullWidth            variant="standard"          />          <TextField            {...register("description")}            margin="dense"            label="Description"            type="text"            fullWidth            variant="standard"          />          <TextField            {...register("url")}            error={!!errors.url}            margin="dense"            label="Url"            type="text"            fullWidth            variant="standard"          />        </DialogContent>        <DialogActions>          <Button onClick={handleClose}>Cancel</Button>          <Button type="submit">{productId ? "Edit" : "Create"}</Button>        </DialogActions>      </form>    </Dialog>  );};export default ProductFormDialog;